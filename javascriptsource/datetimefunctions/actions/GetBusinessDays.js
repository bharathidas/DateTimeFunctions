// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Get the Business days(working days) between the dates
 * @param {string} fromDate - MM/dd/yyyy
 * @param {string} toDate - MM/dd/yyyy
 * @returns {Promise.<Big>}
 */
export async function GetBusinessDays(fromDate, toDate) {
	// BEGIN USER CODE
	function calculateBusinessDays(startDate, endDate){
// Validate input
if (endDate < startDate)
    return 0;

// Calculate days between dates
var millisecondsPerDay = 86400 * 1000; // Day in milliseconds
startDate.setHours(0,0,0,1);  // Start just after midnight
endDate.setHours(23,59,59,999);  // End just before midnight

const vTimezoneDiff = endDate.getTimezoneOffset() - startDate.getTimezoneOffset();
    if (vTimezoneDiff != 0) {
        // Handle daylight saving time difference between two dates.
        startDate.setMinutes(startDate.getMinutes() + vTimezoneDiff);
    }

var diff = endDate - startDate;  // Milliseconds between datetime objects    
var days = Math.ceil(diff / millisecondsPerDay);

// Subtract two weekend days for every week in between
var weeks = Math.floor(days / 7);
days = days - (weeks * 2);

// Handle special cases
var startDay = startDate.getDay();
var endDay = endDate.getDay();

// Remove weekend not previously removed.   
if (startDay - endDay > 1)         
    days = days - 2;      

// Remove start day if span starts on Sunday but ends before Saturday
if (startDay == 0 && endDay != 6) {
    days = days - 1;  
}

// Remove end day if span ends on Saturday but starts after Sunday
if (endDay == 6 && startDay != 0) {
    days = days - 1;
}

return days;
}
mx.logger.info('fromdate:'+fromDate);
mx.logger.info('ToDate:'+toDate);
var d1=new Date(fromDate);
var d2=new Date(toDate);
mx.logger.info('d1:'+d1);
mx.logger.info('d2:'+d2);
var value= calculateBusinessDays(d1,d2);
mx.logger.info(value);
	return value;
	// END USER CODE
}
